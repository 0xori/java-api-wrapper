apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceCompatibility = 1.6
version = '1.0.0-SNAPSHOT'
group   = 'com.soundcloud'

configurations { deployerJars }
repositories   { mavenCentral() }

sourceSets {
  examples {
    compileClasspath = sourceSets.main.classes + sourceSets.main.runtimeClasspath
  }
}

dependencies {
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.0.3'
  compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.0.1'
  compile group: 'org.json', name: 'json', version: '20090211'

  testCompile group: 'junit', name: 'junit-dep', version: '4.8.2'
  testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3.RC2'
  testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3.RC2'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '1.8.5'

  deployerJars 'org.apache.maven.wagon:wagon-ssh-external:1.0-beta-2'
}

uploadArchives {
  repositories.mavenDeployer {
     configuration = configurations.deployerJars
     repository(url: "scpexe://files.int.s-cloud.net/srv/www/files/maven") {
        authentication(userName: "soundcloud")
     }
     pom {
       project {
         description 'SoundCloud Java API wrapper (OAuth2 only), works on Android'
         url 'https://github.com/soundcloud/java-api-wrapper#readme'
         inceptionYear '2011'
         licenses {
           license {
             name 'The MIT License'
             url  'https://github.com/soundcloud/java-api-wrapper/raw/master/LICENSE'
             distribution 'repo'
           }
         }
       }
       withXml { xml ->
          new XmlParser().parseText("""
           <project>
            <scm>
              <url>https://github.com/soundcloud/java-api-wrapper</url>
              <connection>git://github.com/soundcloud/java-api-wrapper.git</connection>
            </scm>

            <developers>
             <developer>
               <id>jberkel</id>
               <name>Jan Berkel</name>
               <email>jan@soundcloud.com</email>
             </developer>
            </developers>

            <build>
              <plugins>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-compiler-plugin</artifactId>
                  <configuration>
                    <source>$sourceCompatibility</source>
                    <target>$sourceCompatibility</target>
                  </configuration>
                </plugin>
              </plugins>
            </build>
           </project>
            """).children().each { kid -> xml.asNode().append(kid) }
        }
    }
  }
}

[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all']

httpDebug = ['org.apache.commons.logging.Log': 'org.apache.commons.logging.impl.SimpleLog',
             'org.apache.commons.logging.simplelog.showdatetime': 'true',
             'org.apache.commons.logging.simplelog.log.org.apache.http': 'DEBUG',
             'org.apache.commons.logging.simplelog.log.org.apache.http.wire': 'ERROR']

def example(name, mainClass, arguments) {
  task(name, dependsOn: ['compileJava', 'compileExamplesJava']) << {
    javaexec {
      main = 'com.soundcloud.api.examples.'+mainClass
      classpath = sourceSets.main.runtimeClasspath + sourceSets.examples.classes
      if (logger.debugEnabled) systemProperties httpDebug
      args arguments.call()
    }
  }
}
example('createWrapper', 'CreateWrapper', { [client_id, client_secret, login, password, env] })
example('getResource',   'GetResource',   { resource })
example('uploadFile',    'UploadFile',    { file })

task writePom << {
  repositories.mavenDeployer().getPom().writeTo("pom.xml")
}

task doc(type: Javadoc) {
  source = sourceSets.main.allJava
  title = "SoundCloud Java API Wrapper $version"
  classpath = sourceSets.main.compileClasspath
  destinationDir = new File(buildDir, 'javadoc')
  //options.noNavBar = true
  options.links = [
    "http://hc.apache.org/httpcomponents-core-ga/httpcore/apidocs/",
    "http://json.org/javadoc/"
  ]
  //options.stylesheetFile = new File('styles.css')
}
