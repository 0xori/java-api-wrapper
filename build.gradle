apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceCompatibility = 1.6
version = '1.0.0-SNAPSHOT'

repositories {
  mavenCentral()
}

sourceSets {
  examples {
    compileClasspath = sourceSets.main.classes + sourceSets.main.runtimeClasspath
  }
}

dependencies {
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.0.3'
  compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.0.1'
  compile group: 'org.json', name: 'json', version: '20090211'

  testCompile group: 'junit', name: 'junit-dep', version: '4.8.2'
  testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3.RC2'
  testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3.RC2'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '1.8.5'
}

[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all']

httpDebug = ['org.apache.commons.logging.Log': 'org.apache.commons.logging.impl.SimpleLog',
             'org.apache.commons.logging.simplelog.showdatetime': 'true',
             'org.apache.commons.logging.simplelog.log.org.apache.http': 'DEBUG',
             'org.apache.commons.logging.simplelog.log.org.apache.http.wire': 'ERROR']

def exampleTask(name, mainClass, arguments) {
  task(name, dependsOn: ['compileJava', 'compileExamplesJava']) << {
    javaexec {
      main = 'com.soundcloud.api.examples.'+mainClass
      classpath = sourceSets.main.runtimeClasspath + sourceSets.examples.classes
      systemProperties httpDebug
      args arguments.call()
    }
  }
}
exampleTask('createWrapper', 'CreateWrapper', { [client_id, client_secret, login, password, env] })
exampleTask('getResource',   'GetResource',   { resource })
exampleTask('uploadFile',    'UploadFile',    { file })

task writePom << {
  pom {
    project {
      groupId 'com.soundcloud'
      inceptionYear '2011'
      licenses {
        license {
          name 'The MIT License'
          url  'https://github.com/soundcloud/java-api-wrapper/raw/master/LICENSE'
          distribution 'repo'
        }
      }
    }
  }.writeTo("pom.xml")
}

task doc(type: Javadoc) {
  source = sourceSets.main.allJava
  title = "SoundCloud Java API Wrapper $version"
  classpath = sourceSets.main.compileClasspath
  destinationDir = new File(buildDir, 'javadoc')
  //options.stylesheetFile = new File('styles.css')
}
